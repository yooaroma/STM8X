                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.10 #13778 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_iwdg_main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _cmd_test_init_before_irq_enable
                                     12 	.globl _cmd_test
                                     13 	.globl _cmd_iwdg
                                     14 	.globl _calConfigIWDG
                                     15 	.globl _DecToLong
                                     16 	.globl _HexToInt
                                     17 	.globl _mib_printf
                                     18 	.globl _MibWriteDebugString
                                     19 	.globl ___memcpy
                                     20 	.globl _strcmp
                                     21 	.globl _GPIO_Configuration
                                     22 ;--------------------------------------------------------
                                     23 ; ram data
                                     24 ;--------------------------------------------------------
                                     25 	.area DATA
                                     26 ;--------------------------------------------------------
                                     27 ; ram data
                                     28 ;--------------------------------------------------------
                                     29 	.area INITIALIZED
      000000                         30 _cmdTbl_only:
      000000                         31 	.ds 12
                                     32 ;--------------------------------------------------------
                                     33 ; absolute external ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DABS (ABS)
                                     36 
                                     37 ; default segment ordering for linker
                                     38 	.area HOME
                                     39 	.area GSINIT
                                     40 	.area GSFINAL
                                     41 	.area CONST
                                     42 	.area INITIALIZER
                                     43 	.area CODE
                                     44 
                                     45 ;--------------------------------------------------------
                                     46 ; global & static initialisations
                                     47 ;--------------------------------------------------------
                                     48 	.area HOME
                                     49 	.area GSINIT
                                     50 	.area GSFINAL
                                     51 	.area GSINIT
                                     52 ;--------------------------------------------------------
                                     53 ; Home
                                     54 ;--------------------------------------------------------
                                     55 	.area HOME
                                     56 	.area HOME
                                     57 ;--------------------------------------------------------
                                     58 ; code
                                     59 ;--------------------------------------------------------
                                     60 	.area CODE
                                     61 ;	stm8s_iwdg_main.c: 81: void cmd_iwdg(void)
                                     62 ;	-----------------------------------------
                                     63 ;	 function cmd_iwdg
                                     64 ;	-----------------------------------------
      000000                         65 _cmd_iwdg:
      000000 52 0A            [ 2]   66 	sub	sp, #10
                                     67 ;	stm8s_iwdg_main.c: 87: for (cptr = cmdTbl;; cptr++) 
      000002 AEr00r00         [ 2]   68 	ldw	x, #(_cmdTbl+0)
      000005 1F 01            [ 2]   69 	ldw	(0x01, sp), x
      000007 5F               [ 1]   70 	clrw	x
      000008 1F 07            [ 2]   71 	ldw	(0x07, sp), x
      00000A 1F 05            [ 2]   72 	ldw	(0x05, sp), x
      00000C 16 01            [ 2]   73 	ldw	y, (0x01, sp)
      00000E 17 09            [ 2]   74 	ldw	(0x09, sp), y
      000010                         75 00106$:
                                     76 ;	stm8s_iwdg_main.c: 89: if(cptr->cmd==0)
      000010 1E 09            [ 2]   77 	ldw	x, (0x09, sp)
      000012 FE               [ 2]   78 	ldw	x, (x)
      000013 1F 03            [ 2]   79 	ldw	(0x03, sp), x
      000015 26 19            [ 1]   80 	jrne	00102$
                                     81 ;	stm8s_iwdg_main.c: 91: ccprintf(1,("INFO:+cmd_iwdg...\r\n"));
      000017 4Br00            [ 1]   82 	push	#<(__str_0+0)
      000019 4Bs00            [ 1]   83 	push	#((__str_0+0) >> 8)
      00001B CDr00r00         [ 4]   84 	call	_mib_printf
      00001E 5B 02            [ 2]   85 	addw	sp, #2
                                     86 ;	stm8s_iwdg_main.c: 92: memcpy((void *)&(cptr->cmd),(void *)&(cmdTbl_only[0].cmd),sizeof(CMD_MY));
      000020 AEr00r00         [ 2]   87 	ldw	x, #_cmdTbl_only+0
      000023 16 01            [ 2]   88 	ldw	y, (0x01, sp)
      000025 4B 06            [ 1]   89 	push	#0x06
      000027 4B 00            [ 1]   90 	push	#0x00
      000029 89               [ 2]   91 	pushw	x
      00002A 93               [ 1]   92 	ldw	x, y
      00002B CDr00r00         [ 4]   93 	call	___memcpy
                                     94 ;	stm8s_iwdg_main.c: 93: break;
      00002E 20 2F            [ 2]   95 	jra	00105$
      000030                         96 00102$:
                                     97 ;	stm8s_iwdg_main.c: 95: index++;
      000030 1E 07            [ 2]   98 	ldw	x, (0x07, sp)
      000032 5C               [ 1]   99 	incw	x
      000033 1F 07            [ 2]  100 	ldw	(0x07, sp), x
      000035 26 05            [ 1]  101 	jrne	00126$
      000037 1E 05            [ 2]  102 	ldw	x, (0x05, sp)
      000039 5C               [ 1]  103 	incw	x
      00003A 1F 05            [ 2]  104 	ldw	(0x05, sp), x
      00003C                        105 00126$:
                                    106 ;	stm8s_iwdg_main.c: 96: if(index>MAX_COMMANDS)
      00003C AE 00 06         [ 2]  107 	ldw	x, #0x0006
      00003F 13 07            [ 2]  108 	cpw	x, (0x07, sp)
      000041 4F               [ 1]  109 	clr	a
      000042 12 06            [ 1]  110 	sbc	a, (0x06, sp)
      000044 4F               [ 1]  111 	clr	a
      000045 12 05            [ 1]  112 	sbc	a, (0x05, sp)
      000047 24 0B            [ 1]  113 	jrnc	00107$
                                    114 ;	stm8s_iwdg_main.c: 98: ccprintf(1,("INFO:-cmd_iwdg...\r\n"));
      000049 4Br14            [ 1]  115 	push	#<(__str_1+0)
      00004B 4Bs00            [ 1]  116 	push	#((__str_1+0) >> 8)
      00004D CDr00r00         [ 4]  117 	call	_mib_printf
      000050 5B 02            [ 2]  118 	addw	sp, #2
                                    119 ;	stm8s_iwdg_main.c: 99: return;
      000052 20 0B            [ 2]  120 	jra	00108$
      000054                        121 00107$:
                                    122 ;	stm8s_iwdg_main.c: 87: for (cptr = cmdTbl;; cptr++) 
      000054 1E 09            [ 2]  123 	ldw	x, (0x09, sp)
      000056 1C 00 06         [ 2]  124 	addw	x, #0x0006
      000059 1F 09            [ 2]  125 	ldw	(0x09, sp), x
      00005B 1F 01            [ 2]  126 	ldw	(0x01, sp), x
      00005D 20 B1            [ 2]  127 	jra	00106$
      00005F                        128 00105$:
                                    129 ;	stm8s_iwdg_main.c: 102: return;
      00005F                        130 00108$:
                                    131 ;	stm8s_iwdg_main.c: 103: }
      00005F 5B 0A            [ 2]  132 	addw	sp, #10
      000061 81               [ 4]  133 	ret
                                    134 ;	stm8s_iwdg_main.c: 108: void cmd_test(void)
                                    135 ;	-----------------------------------------
                                    136 ;	 function cmd_test
                                    137 ;	-----------------------------------------
      000062                        138 _cmd_test:
                                    139 ;	stm8s_iwdg_main.c: 110: cmd_iwdg();
                                    140 ;	stm8s_iwdg_main.c: 111: }
      000062 CCr00r00         [ 2]  141 	jp	_cmd_iwdg
                                    142 ;	stm8s_iwdg_main.c: 117: void cmd_test_init_before_irq_enable(void)
                                    143 ;	-----------------------------------------
                                    144 ;	 function cmd_test_init_before_irq_enable
                                    145 ;	-----------------------------------------
      000065                        146 _cmd_test_init_before_irq_enable:
                                    147 ;	stm8s_iwdg_main.c: 120: }
      000065 81               [ 4]  148 	ret
                                    149 ;	stm8s_iwdg_main.c: 131: static int DoIWDG(CMD_MY *cptr, int argc, char **argv)
                                    150 ;	-----------------------------------------
                                    151 ;	 function DoIWDG
                                    152 ;	-----------------------------------------
      000066                        153 _DoIWDG:
      000066 52 0D            [ 2]  154 	sub	sp, #13
      000068 51               [ 1]  155 	exgw	x, y
                                    156 ;	stm8s_iwdg_main.c: 133: uint32_t vdwAddr = 0;
      000069 5F               [ 1]  157 	clrw	x
      00006A 1F 03            [ 2]  158 	ldw	(0x03, sp), x
      00006C 1F 01            [ 2]  159 	ldw	(0x01, sp), x
                                    160 ;	stm8s_iwdg_main.c: 134: uint8_t vbData = 0;
      00006E 0F 05            [ 1]  161 	clr	(0x05, sp)
                                    162 ;	stm8s_iwdg_main.c: 135: uint16_t vwData = 0;
      000070 5F               [ 1]  163 	clrw	x
      000071 1F 06            [ 2]  164 	ldw	(0x06, sp), x
                                    165 ;	stm8s_iwdg_main.c: 139: MibWriteDebugString(cptr->usage);
      000073 93               [ 1]  166 	ldw	x, y
      000074 1C 00 04         [ 2]  167 	addw	x, #0x0004
      000077 1F 08            [ 2]  168 	ldw	(0x08, sp), x
                                    169 ;	stm8s_iwdg_main.c: 137: if (argc < 2)
      000079 1E 10            [ 2]  170 	ldw	x, (0x10, sp)
      00007B A3 00 02         [ 2]  171 	cpw	x, #0x0002
      00007E 2E 0A            [ 1]  172 	jrsge	00102$
                                    173 ;	stm8s_iwdg_main.c: 139: MibWriteDebugString(cptr->usage);
      000080 1E 08            [ 2]  174 	ldw	x, (0x08, sp)
      000082 FE               [ 2]  175 	ldw	x, (x)
      000083 CDr00r00         [ 4]  176 	call	_MibWriteDebugString
                                    177 ;	stm8s_iwdg_main.c: 140: return FALSE;
      000086 5F               [ 1]  178 	clrw	x
      000087 CCr02r60         [ 2]  179 	jp	00141$
      00008A                        180 00102$:
                                    181 ;	stm8s_iwdg_main.c: 145: if (!strcmp(argv[1], "write")) // _CMD_MY_WRITE_
      00008A 1E 12            [ 2]  182 	ldw	x, (0x12, sp)
      00008C 5C               [ 1]  183 	incw	x
      00008D 5C               [ 1]  184 	incw	x
      00008E 1F 0A            [ 2]  185 	ldw	(0x0a, sp), x
      000090 FE               [ 2]  186 	ldw	x, (x)
      000091 4Br28            [ 1]  187 	push	#<(___str_2+0)
      000093 4Bs00            [ 1]  188 	push	#((___str_2+0) >> 8)
      000095 CDr00r00         [ 4]  189 	call	_strcmp
                                    190 ;	stm8s_iwdg_main.c: 152: if (!HexToInt(argv[2], &vdwAddr, 32))
      000098 16 12            [ 2]  191 	ldw	y, (0x12, sp)
      00009A 72 A9 00 04      [ 2]  192 	addw	y, #0x0004
      00009E 17 0C            [ 2]  193 	ldw	(0x0c, sp), y
                                    194 ;	stm8s_iwdg_main.c: 145: if (!strcmp(argv[1], "write")) // _CMD_MY_WRITE_
      0000A0 5D               [ 2]  195 	tnzw	x
      0000A1 26 6E            [ 1]  196 	jrne	00139$
                                    197 ;	stm8s_iwdg_main.c: 147: if (argc < 4)
      0000A3 1E 10            [ 2]  198 	ldw	x, (0x10, sp)
      0000A5 A3 00 04         [ 2]  199 	cpw	x, #0x0004
      0000A8 2E 0A            [ 1]  200 	jrsge	00104$
                                    201 ;	stm8s_iwdg_main.c: 149: MibWriteDebugString(cptr->usage);
      0000AA 1E 08            [ 2]  202 	ldw	x, (0x08, sp)
      0000AC FE               [ 2]  203 	ldw	x, (x)
      0000AD CDr00r00         [ 4]  204 	call	_MibWriteDebugString
                                    205 ;	stm8s_iwdg_main.c: 150: return FALSE;
      0000B0 5F               [ 1]  206 	clrw	x
      0000B1 CCr02r60         [ 2]  207 	jp	00141$
      0000B4                        208 00104$:
                                    209 ;	stm8s_iwdg_main.c: 152: if (!HexToInt(argv[2], &vdwAddr, 32))
      0000B4 96               [ 1]  210 	ldw	x, sp
      0000B5 5C               [ 1]  211 	incw	x
      0000B6 16 0C            [ 2]  212 	ldw	y, (0x0c, sp)
      0000B8 90 FE            [ 2]  213 	ldw	y, (y)
      0000BA 4B 20            [ 1]  214 	push	#0x20
      0000BC 4B 00            [ 1]  215 	push	#0x00
      0000BE 89               [ 2]  216 	pushw	x
      0000BF 93               [ 1]  217 	ldw	x, y
      0000C0 CDr00r00         [ 4]  218 	call	_HexToInt
      0000C3 5D               [ 2]  219 	tnzw	x
      0000C4 26 0D            [ 1]  220 	jrne	00106$
                                    221 ;	stm8s_iwdg_main.c: 154: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0000C6 4Br2E            [ 1]  222 	push	#<(__str_3+0)
      0000C8 4Bs00            [ 1]  223 	push	#((__str_3+0) >> 8)
      0000CA CDr00r00         [ 4]  224 	call	_mib_printf
      0000CD 5B 02            [ 2]  225 	addw	sp, #2
                                    226 ;	stm8s_iwdg_main.c: 155: return FALSE;
      0000CF 5F               [ 1]  227 	clrw	x
      0000D0 CCr02r60         [ 2]  228 	jp	00141$
      0000D3                        229 00106$:
                                    230 ;	stm8s_iwdg_main.c: 157: if (!HexToInt(argv[3], &vbData, 8))
      0000D3 16 12            [ 2]  231 	ldw	y, (0x12, sp)
      0000D5 90 EE 06         [ 2]  232 	ldw	y, (0x6, y)
      0000D8 4B 08            [ 1]  233 	push	#0x08
      0000DA 4B 00            [ 1]  234 	push	#0x00
      0000DC 96               [ 1]  235 	ldw	x, sp
      0000DD 1C 00 07         [ 2]  236 	addw	x, #7
      0000E0 89               [ 2]  237 	pushw	x
      0000E1 93               [ 1]  238 	ldw	x, y
      0000E2 CDr00r00         [ 4]  239 	call	_HexToInt
      0000E5 5D               [ 2]  240 	tnzw	x
      0000E6 26 0D            [ 1]  241 	jrne	00108$
                                    242 ;	stm8s_iwdg_main.c: 159: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0000E8 4Br2E            [ 1]  243 	push	#<(__str_3+0)
      0000EA 4Bs00            [ 1]  244 	push	#((__str_3+0) >> 8)
      0000EC CDr00r00         [ 4]  245 	call	_mib_printf
      0000EF 5B 02            [ 2]  246 	addw	sp, #2
                                    247 ;	stm8s_iwdg_main.c: 160: return FALSE;
      0000F1 5F               [ 1]  248 	clrw	x
      0000F2 CCr02r60         [ 2]  249 	jp	00141$
      0000F5                        250 00108$:
                                    251 ;	stm8s_iwdg_main.c: 162: wr_ADDR8(vdwAddr, vbData);
      0000F5 1E 03            [ 2]  252 	ldw	x, (0x03, sp)
      0000F7 7B 05            [ 1]  253 	ld	a, (0x05, sp)
      0000F9 F7               [ 1]  254 	ld	(x), a
                                    255 ;	stm8s_iwdg_main.c: 163: ccprintf(_DEBUG_CMD_A_,("wr_ADDR8 : 0x%08lx[0x%02x]\r\n", vdwAddr,vbData));
      0000FA 5F               [ 1]  256 	clrw	x
      0000FB 7B 05            [ 1]  257 	ld	a, (0x05, sp)
      0000FD 97               [ 1]  258 	ld	xl, a
      0000FE 89               [ 2]  259 	pushw	x
      0000FF 1E 05            [ 2]  260 	ldw	x, (0x05, sp)
      000101 89               [ 2]  261 	pushw	x
      000102 1E 05            [ 2]  262 	ldw	x, (0x05, sp)
      000104 89               [ 2]  263 	pushw	x
      000105 4Br4B            [ 1]  264 	push	#<(__str_4+0)
      000107 4Bs00            [ 1]  265 	push	#((__str_4+0) >> 8)
      000109 CDr00r00         [ 4]  266 	call	_mib_printf
      00010C 5B 08            [ 2]  267 	addw	sp, #8
      00010E CCr02r5E         [ 2]  268 	jp	00140$
      000111                        269 00139$:
                                    270 ;	stm8s_iwdg_main.c: 168: else if (!strcmp(argv[1], "read")) // _CMD_MY_READ_
      000111 1E 0A            [ 2]  271 	ldw	x, (0x0a, sp)
      000113 FE               [ 2]  272 	ldw	x, (x)
      000114 4Br68            [ 1]  273 	push	#<(___str_5+0)
      000116 4Bs00            [ 1]  274 	push	#((___str_5+0) >> 8)
      000118 CDr00r00         [ 4]  275 	call	_strcmp
      00011B 51               [ 1]  276 	exgw	x, y
                                    277 ;	stm8s_iwdg_main.c: 170: if (argc < 3)
      00011C 1E 10            [ 2]  278 	ldw	x, (0x10, sp)
      00011E A3 00 03         [ 2]  279 	cpw	x, #0x0003
      000121 2F 02            [ 1]  280 	jrslt	00229$
      000123 4F               [ 1]  281 	clr	a
      000124 C5                     282 	.byte 0xc5
      000125                        283 00229$:
      000125 A6 01            [ 1]  284 	ld	a, #0x01
      000127                        285 00230$:
                                    286 ;	stm8s_iwdg_main.c: 168: else if (!strcmp(argv[1], "read")) // _CMD_MY_READ_
      000127 90 5D            [ 2]  287 	tnzw	y
      000129 26 46            [ 1]  288 	jrne	00136$
                                    289 ;	stm8s_iwdg_main.c: 170: if (argc < 3)
      00012B 4D               [ 1]  290 	tnz	a
      00012C 27 0A            [ 1]  291 	jreq	00110$
                                    292 ;	stm8s_iwdg_main.c: 172: MibWriteDebugString(cptr->usage);
      00012E 1E 08            [ 2]  293 	ldw	x, (0x08, sp)
      000130 FE               [ 2]  294 	ldw	x, (x)
      000131 CDr00r00         [ 4]  295 	call	_MibWriteDebugString
                                    296 ;	stm8s_iwdg_main.c: 173: return FALSE;
      000134 5F               [ 1]  297 	clrw	x
      000135 CCr02r60         [ 2]  298 	jp	00141$
      000138                        299 00110$:
                                    300 ;	stm8s_iwdg_main.c: 175: if (!HexToInt(argv[2], &vdwAddr, 32))
      000138 96               [ 1]  301 	ldw	x, sp
      000139 5C               [ 1]  302 	incw	x
      00013A 16 0C            [ 2]  303 	ldw	y, (0x0c, sp)
      00013C 90 FE            [ 2]  304 	ldw	y, (y)
      00013E 4B 20            [ 1]  305 	push	#0x20
      000140 4B 00            [ 1]  306 	push	#0x00
      000142 89               [ 2]  307 	pushw	x
      000143 93               [ 1]  308 	ldw	x, y
      000144 CDr00r00         [ 4]  309 	call	_HexToInt
      000147 5D               [ 2]  310 	tnzw	x
      000148 26 0D            [ 1]  311 	jrne	00112$
                                    312 ;	stm8s_iwdg_main.c: 177: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      00014A 4Br2E            [ 1]  313 	push	#<(__str_3+0)
      00014C 4Bs00            [ 1]  314 	push	#((__str_3+0) >> 8)
      00014E CDr00r00         [ 4]  315 	call	_mib_printf
      000151 5B 02            [ 2]  316 	addw	sp, #2
                                    317 ;	stm8s_iwdg_main.c: 178: return FALSE;
      000153 5F               [ 1]  318 	clrw	x
      000154 CCr02r60         [ 2]  319 	jp	00141$
      000157                        320 00112$:
                                    321 ;	stm8s_iwdg_main.c: 181: vbData = rd_ADDR8(vdwAddr);
      000157 1E 03            [ 2]  322 	ldw	x, (0x03, sp)
      000159 F6               [ 1]  323 	ld	a, (x)
      00015A 6B 05            [ 1]  324 	ld	(0x05, sp), a
                                    325 ;	stm8s_iwdg_main.c: 183: ccprintf(_DEBUG_CMD_A_,("rd_ADDR8 : 0x%08lx[0x%02x]\r\n", vdwAddr,vbData));
      00015C 5F               [ 1]  326 	clrw	x
      00015D 97               [ 1]  327 	ld	xl, a
      00015E 89               [ 2]  328 	pushw	x
      00015F 1E 05            [ 2]  329 	ldw	x, (0x05, sp)
      000161 89               [ 2]  330 	pushw	x
      000162 1E 05            [ 2]  331 	ldw	x, (0x05, sp)
      000164 89               [ 2]  332 	pushw	x
      000165 4Br6D            [ 1]  333 	push	#<(__str_6+0)
      000167 4Bs00            [ 1]  334 	push	#((__str_6+0) >> 8)
      000169 CDr00r00         [ 4]  335 	call	_mib_printf
      00016C 5B 08            [ 2]  336 	addw	sp, #8
      00016E CCr02r5E         [ 2]  337 	jp	00140$
      000171                        338 00136$:
                                    339 ;	stm8s_iwdg_main.c: 188: else if (!strcmp(argv[1], "start")) // _CMD_MY_READ_
      000171 1E 0A            [ 2]  340 	ldw	x, (0x0a, sp)
      000173 FE               [ 2]  341 	ldw	x, (x)
      000174 88               [ 1]  342 	push	a
      000175 4Br8A            [ 1]  343 	push	#<(___str_7+0)
      000177 4Bs00            [ 1]  344 	push	#((___str_7+0) >> 8)
      000179 CDr00r00         [ 4]  345 	call	_strcmp
      00017C 84               [ 1]  346 	pop	a
      00017D 5D               [ 2]  347 	tnzw	x
      00017E 27 03            [ 1]  348 	jreq	00234$
      000180 CCr02r26         [ 2]  349 	jp	00133$
      000183                        350 00234$:
                                    351 ;	stm8s_iwdg_main.c: 191: uint16_t vwDelayWD = 0;
      000183 90 5F            [ 1]  352 	clrw	y
                                    353 ;	stm8s_iwdg_main.c: 192: if (argc < 3)
      000185 4D               [ 1]  354 	tnz	a
      000186 27 0A            [ 1]  355 	jreq	00114$
                                    356 ;	stm8s_iwdg_main.c: 194: MibWriteDebugString(cptr->usage);
      000188 1E 08            [ 2]  357 	ldw	x, (0x08, sp)
      00018A FE               [ 2]  358 	ldw	x, (x)
      00018B CDr00r00         [ 4]  359 	call	_MibWriteDebugString
                                    360 ;	stm8s_iwdg_main.c: 195: return FALSE;
      00018E 5F               [ 1]  361 	clrw	x
      00018F CCr02r60         [ 2]  362 	jp	00141$
      000192                        363 00114$:
                                    364 ;	stm8s_iwdg_main.c: 197: if (!DecToLong(argv[2], &vwData, 16))
      000192 1E 0C            [ 2]  365 	ldw	x, (0x0c, sp)
      000194 FE               [ 2]  366 	ldw	x, (x)
      000195 1F 0A            [ 2]  367 	ldw	(0x0a, sp), x
      000197 90 89            [ 2]  368 	pushw	y
      000199 4B 10            [ 1]  369 	push	#0x10
      00019B 4B 00            [ 1]  370 	push	#0x00
      00019D 96               [ 1]  371 	ldw	x, sp
      00019E 1C 00 0A         [ 2]  372 	addw	x, #10
      0001A1 89               [ 2]  373 	pushw	x
      0001A2 1E 10            [ 2]  374 	ldw	x, (0x10, sp)
      0001A4 CDr00r00         [ 4]  375 	call	_DecToLong
      0001A7 90 85            [ 2]  376 	popw	y
      0001A9 5D               [ 2]  377 	tnzw	x
      0001AA 26 0D            [ 1]  378 	jrne	00116$
                                    379 ;	stm8s_iwdg_main.c: 199: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0001AC 4Br2E            [ 1]  380 	push	#<(__str_3+0)
      0001AE 4Bs00            [ 1]  381 	push	#((__str_3+0) >> 8)
      0001B0 CDr00r00         [ 4]  382 	call	_mib_printf
      0001B3 5B 02            [ 2]  383 	addw	sp, #2
                                    384 ;	stm8s_iwdg_main.c: 200: return FALSE;
      0001B5 5F               [ 1]  385 	clrw	x
      0001B6 CCr02r60         [ 2]  386 	jp	00141$
      0001B9                        387 00116$:
                                    388 ;	stm8s_iwdg_main.c: 202: GPIO_Configuration();
      0001B9 90 89            [ 2]  389 	pushw	y
      0001BB CDr02r66         [ 4]  390 	call	_GPIO_Configuration
      0001BE 1E 08            [ 2]  391 	ldw	x, (0x08, sp)
      0001C0 89               [ 2]  392 	pushw	x
      0001C1 4Br90            [ 1]  393 	push	#<(__str_8+0)
      0001C3 4Bs00            [ 1]  394 	push	#((__str_8+0) >> 8)
      0001C5 CDr00r00         [ 4]  395 	call	_mib_printf
      0001C8 5B 04            [ 2]  396 	addw	sp, #4
      0001CA 1E 08            [ 2]  397 	ldw	x, (0x08, sp)
      0001CC CDr00r00         [ 4]  398 	call	_calConfigIWDG
      0001CF 90 85            [ 2]  399 	popw	y
                                    400 ;	stm8s_iwdg_main.c: 205: gwMibMiliSec = 0; 
      0001D1 5F               [ 1]  401 	clrw	x
      0001D2 CFu00u00         [ 2]  402 	ldw	_gwMibMiliSec+0, x
                                    403 ;	stm8s_iwdg_main.c: 206: do {	
      0001D5 0F 0D            [ 1]  404 	clr	(0x0d, sp)
      0001D7                        405 00123$:
                                    406 ;	stm8s_iwdg_main.c: 207: if(gwMibMiliSec==0)
      0001D7 CEu00u00         [ 2]  407 	ldw	x, _gwMibMiliSec+0
      0001DA 26 FB            [ 1]  408 	jrne	00123$
                                    409 ;	stm8s_iwdg_main.c: 209: IWDG->KR = 0xAA; // KEY_REFRESH
      0001DC 35 AA 50 E0      [ 1]  410 	mov	0x50e0+0, #0xaa
                                    411 ;	stm8s_iwdg_main.c: 210: if(vwDelayWD==0)
      0001E0 90 5D            [ 2]  412 	tnzw	y
      0001E2 26 32            [ 1]  413 	jrne	00120$
                                    414 ;	stm8s_iwdg_main.c: 212: vbIndex++;
      0001E4 0C 0D            [ 1]  415 	inc	(0x0d, sp)
                                    416 ;	stm8s_iwdg_main.c: 213: vwDelayWD = 100 * vbIndex;
      0001E6 5F               [ 1]  417 	clrw	x
      0001E7 7B 0D            [ 1]  418 	ld	a, (0x0d, sp)
      0001E9 97               [ 1]  419 	ld	xl, a
      0001EA 89               [ 2]  420 	pushw	x
      0001EB 89               [ 2]  421 	pushw	x
      0001EC AE 00 64         [ 2]  422 	ldw	x, #0x0064
      0001EF CDr00r00         [ 4]  423 	call	__mulint
      0001F2 51               [ 1]  424 	exgw	x, y
      0001F3 85               [ 2]  425 	popw	x
                                    426 ;	stm8s_iwdg_main.c: 214: ccprintf(_DEBUG_CMD_A_, ("iwdg start....(%d)[%u:%u]\r\n",vbIndex,vwData,vwDelayWD));		
      0001F4 90 89            [ 2]  427 	pushw	y
      0001F6 90 89            [ 2]  428 	pushw	y
      0001F8 7B 0B            [ 1]  429 	ld	a, (0x0b, sp)
      0001FA 88               [ 1]  430 	push	a
      0001FB 7B 0B            [ 1]  431 	ld	a, (0x0b, sp)
      0001FD 88               [ 1]  432 	push	a
      0001FE 89               [ 2]  433 	pushw	x
      0001FF 4BrCE            [ 1]  434 	push	#<(__str_9+0)
      000201 4Bs00            [ 1]  435 	push	#((__str_9+0) >> 8)
      000203 CDr00r00         [ 4]  436 	call	_mib_printf
      000206 5B 08            [ 2]  437 	addw	sp, #8
      000208 90 85            [ 2]  438 	popw	y
                                    439 ;	stm8s_iwdg_main.c: 215: if(vwDelayWD>=(vwData+100))
      00020A 1E 06            [ 2]  440 	ldw	x, (0x06, sp)
      00020C 1C 00 64         [ 2]  441 	addw	x, #0x0064
      00020F 1F 0B            [ 2]  442 	ldw	(0x0b, sp), x
      000211 93               [ 1]  443 	ldw	x, y
      000212 13 0B            [ 2]  444 	cpw	x, (0x0b, sp)
      000214 24 48            [ 1]  445 	jrnc	00140$
                                    446 ;	stm8s_iwdg_main.c: 217: break;
      000216                        447 00120$:
                                    448 ;	stm8s_iwdg_main.c: 220: gwMibMiliSec = 100;
      000216 AE 00 64         [ 2]  449 	ldw	x, #0x0064
      000219 CFu00u00         [ 2]  450 	ldw	_gwMibMiliSec+0, x
                                    451 ;	stm8s_iwdg_main.c: 221: vwDelayWD -= 100;
      00021C 72 A2 00 64      [ 2]  452 	subw	y, #0x0064
                                    453 ;	stm8s_iwdg_main.c: 223: UCOM_LED1_GPIO->ODR ^= (uint8_t)UCOM_LED1_PIN;
      000220 90 10 50 0F      [ 1]  454 	bcpl	0x500f, #0
                                    455 ;	stm8s_iwdg_main.c: 225: } while(1);
      000224 20 B1            [ 2]  456 	jra	00123$
      000226                        457 00133$:
                                    458 ;	stm8s_iwdg_main.c: 231: else if (!strcmp(argv[1], "init")) // _CMD_MY_READ_
      000226 1E 0A            [ 2]  459 	ldw	x, (0x0a, sp)
      000228 FE               [ 2]  460 	ldw	x, (x)
      000229 4BrEA            [ 1]  461 	push	#<(___str_10+0)
      00022B 4Bs00            [ 1]  462 	push	#((___str_10+0) >> 8)
      00022D CDr00r00         [ 4]  463 	call	_strcmp
      000230 5D               [ 2]  464 	tnzw	x
      000231 26 0E            [ 1]  465 	jrne	00130$
                                    466 ;	stm8s_iwdg_main.c: 233: GPIO_Configuration();
      000233 CDr02r66         [ 4]  467 	call	_GPIO_Configuration
                                    468 ;	stm8s_iwdg_main.c: 235: ccprintf(_DEBUG_CMD_A_, ("iwdg init....()\r\n"));		
      000236 4BrEF            [ 1]  469 	push	#<(__str_11+0)
      000238 4Bs00            [ 1]  470 	push	#((__str_11+0) >> 8)
      00023A CDr00r00         [ 4]  471 	call	_mib_printf
      00023D 5B 02            [ 2]  472 	addw	sp, #2
      00023F 20 1D            [ 2]  473 	jra	00140$
      000241                        474 00130$:
                                    475 ;	stm8s_iwdg_main.c: 240: else if (!strcmp(argv[1], "help")) // _CMD_MY_READ_
      000241 1E 0A            [ 2]  476 	ldw	x, (0x0a, sp)
      000243 FE               [ 2]  477 	ldw	x, (x)
      000244 4Br01            [ 1]  478 	push	#<(___str_12+0)
      000246 4Bs01            [ 1]  479 	push	#((___str_12+0) >> 8)
      000248 CDr00r00         [ 4]  480 	call	_strcmp
      00024B 5D               [ 2]  481 	tnzw	x
      00024C 26 08            [ 1]  482 	jrne	00127$
                                    483 ;	stm8s_iwdg_main.c: 243: "iwdg init // gpio init\r\n"\
      00024E AEr01r06         [ 2]  484 	ldw	x, #(___str_13+0)
      000251 CDr00r00         [ 4]  485 	call	_MibWriteDebugString
      000254 20 08            [ 2]  486 	jra	00140$
      000256                        487 00127$:
                                    488 ;	stm8s_iwdg_main.c: 249: MibWriteDebugString(cptr->usage);
      000256 1E 08            [ 2]  489 	ldw	x, (0x08, sp)
      000258 FE               [ 2]  490 	ldw	x, (x)
      000259 CDr00r00         [ 4]  491 	call	_MibWriteDebugString
                                    492 ;	stm8s_iwdg_main.c: 250: return FALSE;
      00025C 5F               [ 1]  493 	clrw	x
                                    494 ;	stm8s_iwdg_main.c: 252: return TRUE;
      00025D C5                     495 	.byte 0xc5
      00025E                        496 00140$:
      00025E 5F               [ 1]  497 	clrw	x
      00025F 5C               [ 1]  498 	incw	x
      000260                        499 00141$:
                                    500 ;	stm8s_iwdg_main.c: 253: }
      000260 16 0E            [ 2]  501 	ldw	y, (14, sp)
      000262 5B 13            [ 2]  502 	addw	sp, #19
      000264 90 FC            [ 2]  503 	jp	(y)
                                    504 ;	stm8s_iwdg_main.c: 301: void GPIO_Configuration(void)
                                    505 ;	-----------------------------------------
                                    506 ;	 function GPIO_Configuration
                                    507 ;	-----------------------------------------
      000266                        508 _GPIO_Configuration:
                                    509 ;	stm8s_iwdg_main.c: 316: UCOM_LED1_GPIO->DDR |= (UCOM_LED1_PIN); /* Set Output mode */
      000266 72 10 50 11      [ 1]  510 	bset	0x5011, #0
                                    511 ;	stm8s_iwdg_main.c: 317: UCOM_LED1_GPIO->CR1 |= (UCOM_LED1_PIN);	/* Pull-Up or Push-Pull */
      00026A 72 10 50 12      [ 1]  512 	bset	0x5012, #0
                                    513 ;	stm8s_iwdg_main.c: 318: UCOM_LED1_GPIO->CR2 |= (UCOM_LED1_PIN);	/* Output speed up to 10 MHz */
      00026E 72 10 50 13      [ 1]  514 	bset	0x5013, #0
                                    515 ;	stm8s_iwdg_main.c: 319: UCOM_LED1_GPIO->ODR &= ~(UCOM_LED1_PIN); // low... 
      000272 72 11 50 0F      [ 1]  516 	bres	0x500f, #0
                                    517 ;	stm8s_iwdg_main.c: 324: UCOM_KEY1_GPIO->DDR &= ~(UCOM_KEY1_PIN);  /* Set input mode */
      000276 72 1B 50 07      [ 1]  518 	bres	0x5007, #5
                                    519 ;	stm8s_iwdg_main.c: 325: UCOM_KEY1_GPIO->CR1 |= (UCOM_KEY1_PIN);	 /* Pull-Up or Push-Pull */
      00027A 72 1A 50 08      [ 1]  520 	bset	0x5008, #5
                                    521 ;	stm8s_iwdg_main.c: 326: UCOM_KEY1_GPIO->CR2 &= ~(UCOM_KEY1_PIN); /*  External interrupt disabled */
      00027E 72 1B 50 09      [ 1]  522 	bres	0x5009, #5
                                    523 ;	stm8s_iwdg_main.c: 328: }
      000282 81               [ 4]  524 	ret
                                    525 	.area CODE
                                    526 	.area CONST
                                    527 	.area CONST
      000000                        528 __str_0:
      000000 49 4E 46 4F 3A 2B 63   529 	.ascii "INFO:+cmd_iwdg..."
             6D 64 5F 69 77 64 67
             2E 2E 2E
      000011 0D                     530 	.db 0x0d
      000012 0A                     531 	.db 0x0a
      000013 00                     532 	.db 0x00
                                    533 	.area CODE
                                    534 	.area CONST
      000014                        535 __str_1:
      000014 49 4E 46 4F 3A 2D 63   536 	.ascii "INFO:-cmd_iwdg..."
             6D 64 5F 69 77 64 67
             2E 2E 2E
      000025 0D                     537 	.db 0x0d
      000026 0A                     538 	.db 0x0a
      000027 00                     539 	.db 0x00
                                    540 	.area CODE
                                    541 	.area CONST
      000028                        542 ___str_2:
      000028 77 72 69 74 65         543 	.ascii "write"
      00002D 00                     544 	.db 0x00
                                    545 	.area CODE
                                    546 	.area CONST
      00002E                        547 __str_3:
      00002E 49 6C 6C 75 67 61 6C   548 	.ascii "Illugal character is used."
             20 63 68 61 72 61 63
             74 65 72 20 69 73 20
             75 73 65 64 2E
      000048 0D                     549 	.db 0x0d
      000049 0A                     550 	.db 0x0a
      00004A 00                     551 	.db 0x00
                                    552 	.area CODE
                                    553 	.area CONST
      00004B                        554 __str_4:
      00004B 77 72 5F 41 44 44 52   555 	.ascii "wr_ADDR8 : 0x%08lx[0x%02x]"
             38 20 3A 20 30 78 25
             30 38 6C 78 5B 30 78
             25 30 32 78 5D
      000065 0D                     556 	.db 0x0d
      000066 0A                     557 	.db 0x0a
      000067 00                     558 	.db 0x00
                                    559 	.area CODE
                                    560 	.area CONST
      000068                        561 ___str_5:
      000068 72 65 61 64            562 	.ascii "read"
      00006C 00                     563 	.db 0x00
                                    564 	.area CODE
                                    565 	.area CONST
      00006D                        566 __str_6:
      00006D 72 64 5F 41 44 44 52   567 	.ascii "rd_ADDR8 : 0x%08lx[0x%02x]"
             38 20 3A 20 30 78 25
             30 38 6C 78 5B 30 78
             25 30 32 78 5D
      000087 0D                     568 	.db 0x0d
      000088 0A                     569 	.db 0x0a
      000089 00                     570 	.db 0x00
                                    571 	.area CODE
                                    572 	.area CONST
      00008A                        573 ___str_7:
      00008A 73 74 61 72 74         574 	.ascii "start"
      00008F 00                     575 	.db 0x00
                                    576 	.area CODE
                                    577 	.area CONST
      000090                        578 __str_8:
      000090 69 77 64 67 20 64 65   579 	.ascii "iwdg delay [%d] msec  100msec inc time watch dog generate.."
             6C 61 79 20 5B 25 64
             5D 20 6D 73 65 63 20
             20 31 30 30 6D 73 65
             63 20 69 6E 63 20 74
             69 6D 65 20 77 61 74
             63 68 20 64 6F 67 20
             67 65 6E 65 72 61 74
             65 2E 2E
      0000CB 0D                     580 	.db 0x0d
      0000CC 0A                     581 	.db 0x0a
      0000CD 00                     582 	.db 0x00
                                    583 	.area CODE
                                    584 	.area CONST
      0000CE                        585 __str_9:
      0000CE 69 77 64 67 20 73 74   586 	.ascii "iwdg start....(%d)[%u:%u]"
             61 72 74 2E 2E 2E 2E
             28 25 64 29 5B 25 75
             3A 25 75 5D
      0000E7 0D                     587 	.db 0x0d
      0000E8 0A                     588 	.db 0x0a
      0000E9 00                     589 	.db 0x00
                                    590 	.area CODE
                                    591 	.area CONST
      0000EA                        592 ___str_10:
      0000EA 69 6E 69 74            593 	.ascii "init"
      0000EE 00                     594 	.db 0x00
                                    595 	.area CODE
                                    596 	.area CONST
      0000EF                        597 __str_11:
      0000EF 69 77 64 67 20 69 6E   598 	.ascii "iwdg init....()"
             69 74 2E 2E 2E 2E 28
             29
      0000FE 0D                     599 	.db 0x0d
      0000FF 0A                     600 	.db 0x0a
      000100 00                     601 	.db 0x00
                                    602 	.area CODE
                                    603 	.area CONST
      000101                        604 ___str_12:
      000101 68 65 6C 70            605 	.ascii "help"
      000105 00                     606 	.db 0x00
                                    607 	.area CODE
                                    608 	.area CONST
      000106                        609 ___str_13:
      000106 69 77 64 67 20 68 65   610 	.ascii "iwdg help...."
             6C 70 2E 2E 2E 2E
      000113 09                     611 	.db 0x09
      000114 0D                     612 	.db 0x0d
      000115 0A                     613 	.db 0x0a
      000116 69 77 64 67 20 69 6E   614 	.ascii "iwdg init // gpio init"
             69 74 20 2F 2F 20 67
             70 69 6F 20 69 6E 69
             74
      00012C 0D                     615 	.db 0x0d
      00012D 0A                     616 	.db 0x0a
      00012E 69 77 64 67 20 73 74   617 	.ascii "iwdg start 1000 // 1000msec delay "
             61 72 74 20 31 30 30
             30 20 2F 2F 20 31 30
             30 30 6D 73 65 63 20
             64 65 6C 61 79 20
      000150 0D                     618 	.db 0x0d
      000151 0A                     619 	.db 0x0a
      000152 2F 2F 20 31 30 30 6D   620 	.ascii "// 100msec inc after n times watch dog generate.."
             73 65 63 20 69 6E 63
             20 61 66 74 65 72 20
             6E 20 74 69 6D 65 73
             20 77 61 74 63 68 20
             64 6F 67 20 67 65 6E
             65 72 61 74 65 2E 2E
      000183 0D                     621 	.db 0x0d
      000184 0A                     622 	.db 0x0a
      000185 00                     623 	.db 0x00
                                    624 	.area CODE
                                    625 	.area CONST
      000186                        626 ___str_14:
      000186 69 77 64 67            627 	.ascii "iwdg"
      00018A 00                     628 	.db 0x00
                                    629 	.area CODE
                                    630 	.area CONST
      00018B                        631 ___str_15:
      00018B 20 20 69 77 64 67 20   632 	.ascii "  iwdg {write} [addr] [data]  "
             7B 77 72 69 74 65 7D
             20 5B 61 64 64 72 5D
             20 5B 64 61 74 61 5D
             20 20
      0001A9 0D                     633 	.db 0x0d
      0001AA 0A                     634 	.db 0x0a
      0001AB 20 20 69 77 64 67 20   635 	.ascii "  iwdg {read} [addr] "
             7B 72 65 61 64 7D 20
             5B 61 64 64 72 5D 20
      0001C0 0D                     636 	.db 0x0d
      0001C1 0A                     637 	.db 0x0a
      0001C2 20 20 69 77 64 67 20   638 	.ascii "  iwdg {init} "
             7B 69 6E 69 74 7D 20
      0001D0 0D                     639 	.db 0x0d
      0001D1 0A                     640 	.db 0x0a
      0001D2 20 20 69 77 64 67 20   641 	.ascii "  iwdg {start} [delay:msec] halt.. 100msec inc check...max 1"
             7B 73 74 61 72 74 7D
             20 5B 64 65 6C 61 79
             3A 6D 73 65 63 5D 20
             68 61 6C 74 2E 2E 20
             31 30 30 6D 73 65 63
             20 69 6E 63 20 63 68
             65 63 6B 2E 2E 2E 6D
             61 78 20 31
      00020E 73 65 63               642 	.ascii "sec"
      000211 0D                     643 	.db 0x0d
      000212 0A                     644 	.db 0x0a
      000213 20 20 69 77 64 67 20   645 	.ascii "  iwdg {help}  iwdg help."
             7B 68 65 6C 70 7D 20
             20 69 77 64 67 20 68
             65 6C 70 2E
      00022C 0D                     646 	.db 0x0d
      00022D 0A                     647 	.db 0x0a
      00022E 00                     648 	.db 0x00
                                    649 	.area CODE
                                    650 	.area INITIALIZER
      000000                        651 __xinit__cmdTbl_only:
      000000r01r86                  652 	.dw ___str_14
      000002r00r66                  653 	.dw _DoIWDG
      000004r01r8B                  654 	.dw ___str_15
      000006 00 00                  655 	.dw #0x0000
      000008 00 00                  656 	.dw #0x0000
      00000A 00 00                  657 	.dw #0x0000
                                    658 	.area CABS (ABS)
