                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.10 #13778 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_wwdg_main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _cmd_test_init_before_irq_enable
                                     12 	.globl _cmd_test
                                     13 	.globl _cmd_wwdg
                                     14 	.globl _calConfigWWDG
                                     15 	.globl _DecToLong
                                     16 	.globl _HexToInt
                                     17 	.globl _mib_printf
                                     18 	.globl _MibWriteDebugEmptyCheck
                                     19 	.globl _MibWriteDebugString
                                     20 	.globl ___memcpy
                                     21 	.globl _strcmp
                                     22 	.globl _GPIO_Configuration
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area DATA
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area INITIALIZED
      000000                         31 _cmdTbl_only:
      000000                         32 	.ds 12
                                     33 ;--------------------------------------------------------
                                     34 ; absolute external ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DABS (ABS)
                                     37 
                                     38 ; default segment ordering for linker
                                     39 	.area HOME
                                     40 	.area GSINIT
                                     41 	.area GSFINAL
                                     42 	.area CONST
                                     43 	.area INITIALIZER
                                     44 	.area CODE
                                     45 
                                     46 ;--------------------------------------------------------
                                     47 ; global & static initialisations
                                     48 ;--------------------------------------------------------
                                     49 	.area HOME
                                     50 	.area GSINIT
                                     51 	.area GSFINAL
                                     52 	.area GSINIT
                                     53 ;--------------------------------------------------------
                                     54 ; Home
                                     55 ;--------------------------------------------------------
                                     56 	.area HOME
                                     57 	.area HOME
                                     58 ;--------------------------------------------------------
                                     59 ; code
                                     60 ;--------------------------------------------------------
                                     61 	.area CODE
                                     62 ;	stm8s_wwdg_main.c: 79: void cmd_wwdg(void)
                                     63 ;	-----------------------------------------
                                     64 ;	 function cmd_wwdg
                                     65 ;	-----------------------------------------
      000000                         66 _cmd_wwdg:
      000000 52 0A            [ 2]   67 	sub	sp, #10
                                     68 ;	stm8s_wwdg_main.c: 85: for (cptr = cmdTbl;; cptr++) 
      000002 AEr00r00         [ 2]   69 	ldw	x, #(_cmdTbl+0)
      000005 1F 01            [ 2]   70 	ldw	(0x01, sp), x
      000007 5F               [ 1]   71 	clrw	x
      000008 1F 07            [ 2]   72 	ldw	(0x07, sp), x
      00000A 1F 05            [ 2]   73 	ldw	(0x05, sp), x
      00000C 16 01            [ 2]   74 	ldw	y, (0x01, sp)
      00000E 17 09            [ 2]   75 	ldw	(0x09, sp), y
      000010                         76 00106$:
                                     77 ;	stm8s_wwdg_main.c: 87: if(cptr->cmd==0)
      000010 1E 09            [ 2]   78 	ldw	x, (0x09, sp)
      000012 FE               [ 2]   79 	ldw	x, (x)
      000013 1F 03            [ 2]   80 	ldw	(0x03, sp), x
      000015 26 19            [ 1]   81 	jrne	00102$
                                     82 ;	stm8s_wwdg_main.c: 89: ccprintf(1,("INFO:+cmd_wwdg...\r\n"));
      000017 4Br00            [ 1]   83 	push	#<(__str_0+0)
      000019 4Bs00            [ 1]   84 	push	#((__str_0+0) >> 8)
      00001B CDr00r00         [ 4]   85 	call	_mib_printf
      00001E 5B 02            [ 2]   86 	addw	sp, #2
                                     87 ;	stm8s_wwdg_main.c: 90: memcpy((void *)&(cptr->cmd),(void *)&(cmdTbl_only[0].cmd),sizeof(CMD_MY));
      000020 AEr00r00         [ 2]   88 	ldw	x, #_cmdTbl_only+0
      000023 16 01            [ 2]   89 	ldw	y, (0x01, sp)
      000025 4B 06            [ 1]   90 	push	#0x06
      000027 4B 00            [ 1]   91 	push	#0x00
      000029 89               [ 2]   92 	pushw	x
      00002A 93               [ 1]   93 	ldw	x, y
      00002B CDr00r00         [ 4]   94 	call	___memcpy
                                     95 ;	stm8s_wwdg_main.c: 91: break;
      00002E 20 2F            [ 2]   96 	jra	00105$
      000030                         97 00102$:
                                     98 ;	stm8s_wwdg_main.c: 93: index++;
      000030 1E 07            [ 2]   99 	ldw	x, (0x07, sp)
      000032 5C               [ 1]  100 	incw	x
      000033 1F 07            [ 2]  101 	ldw	(0x07, sp), x
      000035 26 05            [ 1]  102 	jrne	00126$
      000037 1E 05            [ 2]  103 	ldw	x, (0x05, sp)
      000039 5C               [ 1]  104 	incw	x
      00003A 1F 05            [ 2]  105 	ldw	(0x05, sp), x
      00003C                        106 00126$:
                                    107 ;	stm8s_wwdg_main.c: 94: if(index>MAX_COMMANDS)
      00003C AE 00 06         [ 2]  108 	ldw	x, #0x0006
      00003F 13 07            [ 2]  109 	cpw	x, (0x07, sp)
      000041 4F               [ 1]  110 	clr	a
      000042 12 06            [ 1]  111 	sbc	a, (0x06, sp)
      000044 4F               [ 1]  112 	clr	a
      000045 12 05            [ 1]  113 	sbc	a, (0x05, sp)
      000047 24 0B            [ 1]  114 	jrnc	00107$
                                    115 ;	stm8s_wwdg_main.c: 96: ccprintf(1,("INFO:-cmd_wwdg...\r\n"));
      000049 4Br14            [ 1]  116 	push	#<(__str_1+0)
      00004B 4Bs00            [ 1]  117 	push	#((__str_1+0) >> 8)
      00004D CDr00r00         [ 4]  118 	call	_mib_printf
      000050 5B 02            [ 2]  119 	addw	sp, #2
                                    120 ;	stm8s_wwdg_main.c: 97: return;
      000052 20 0B            [ 2]  121 	jra	00108$
      000054                        122 00107$:
                                    123 ;	stm8s_wwdg_main.c: 85: for (cptr = cmdTbl;; cptr++) 
      000054 1E 09            [ 2]  124 	ldw	x, (0x09, sp)
      000056 1C 00 06         [ 2]  125 	addw	x, #0x0006
      000059 1F 09            [ 2]  126 	ldw	(0x09, sp), x
      00005B 1F 01            [ 2]  127 	ldw	(0x01, sp), x
      00005D 20 B1            [ 2]  128 	jra	00106$
      00005F                        129 00105$:
                                    130 ;	stm8s_wwdg_main.c: 100: return;
      00005F                        131 00108$:
                                    132 ;	stm8s_wwdg_main.c: 101: }
      00005F 5B 0A            [ 2]  133 	addw	sp, #10
      000061 81               [ 4]  134 	ret
                                    135 ;	stm8s_wwdg_main.c: 106: void cmd_test(void)
                                    136 ;	-----------------------------------------
                                    137 ;	 function cmd_test
                                    138 ;	-----------------------------------------
      000062                        139 _cmd_test:
                                    140 ;	stm8s_wwdg_main.c: 108: cmd_wwdg();
                                    141 ;	stm8s_wwdg_main.c: 109: }
      000062 CCr00r00         [ 2]  142 	jp	_cmd_wwdg
                                    143 ;	stm8s_wwdg_main.c: 115: void cmd_test_init_before_irq_enable(void)
                                    144 ;	-----------------------------------------
                                    145 ;	 function cmd_test_init_before_irq_enable
                                    146 ;	-----------------------------------------
      000065                        147 _cmd_test_init_before_irq_enable:
                                    148 ;	stm8s_wwdg_main.c: 118: }
      000065 81               [ 4]  149 	ret
                                    150 ;	stm8s_wwdg_main.c: 129: static int DoWWDG(CMD_MY *cptr, int argc, char **argv)
                                    151 ;	-----------------------------------------
                                    152 ;	 function DoWWDG
                                    153 ;	-----------------------------------------
      000066                        154 _DoWWDG:
      000066 52 0E            [ 2]  155 	sub	sp, #14
      000068 51               [ 1]  156 	exgw	x, y
                                    157 ;	stm8s_wwdg_main.c: 131: uint32_t vdwAddr = 0;
      000069 5F               [ 1]  158 	clrw	x
      00006A 1F 07            [ 2]  159 	ldw	(0x07, sp), x
      00006C 1F 05            [ 2]  160 	ldw	(0x05, sp), x
                                    161 ;	stm8s_wwdg_main.c: 132: uint8_t vbData = 0;
      00006E 0F 09            [ 1]  162 	clr	(0x09, sp)
                                    163 ;	stm8s_wwdg_main.c: 133: uint16_t vwData = 0;
      000070 5F               [ 1]  164 	clrw	x
      000071 1F 0A            [ 2]  165 	ldw	(0x0a, sp), x
                                    166 ;	stm8s_wwdg_main.c: 137: MibWriteDebugString(cptr->usage);
      000073 93               [ 1]  167 	ldw	x, y
      000074 1C 00 04         [ 2]  168 	addw	x, #0x0004
      000077 1F 03            [ 2]  169 	ldw	(0x03, sp), x
                                    170 ;	stm8s_wwdg_main.c: 135: if (argc < 2)
      000079 1E 11            [ 2]  171 	ldw	x, (0x11, sp)
      00007B A3 00 02         [ 2]  172 	cpw	x, #0x0002
      00007E 2E 0A            [ 1]  173 	jrsge	00102$
                                    174 ;	stm8s_wwdg_main.c: 137: MibWriteDebugString(cptr->usage);
      000080 1E 03            [ 2]  175 	ldw	x, (0x03, sp)
      000082 FE               [ 2]  176 	ldw	x, (x)
      000083 CDr00r00         [ 4]  177 	call	_MibWriteDebugString
                                    178 ;	stm8s_wwdg_main.c: 138: return FALSE;
      000086 5F               [ 1]  179 	clrw	x
      000087 CCr02rA2         [ 2]  180 	jp	00147$
      00008A                        181 00102$:
                                    182 ;	stm8s_wwdg_main.c: 143: if (!strcmp(argv[1], "write")) // _CMD_MY_WRITE_
      00008A 1E 13            [ 2]  183 	ldw	x, (0x13, sp)
      00008C 5C               [ 1]  184 	incw	x
      00008D 5C               [ 1]  185 	incw	x
      00008E 1F 01            [ 2]  186 	ldw	(0x01, sp), x
      000090 FE               [ 2]  187 	ldw	x, (x)
      000091 4Br28            [ 1]  188 	push	#<(___str_2+0)
      000093 4Bs00            [ 1]  189 	push	#((___str_2+0) >> 8)
      000095 CDr00r00         [ 4]  190 	call	_strcmp
                                    191 ;	stm8s_wwdg_main.c: 150: if (!HexToInt(argv[2], &vdwAddr, 32))
      000098 16 13            [ 2]  192 	ldw	y, (0x13, sp)
      00009A 72 A9 00 04      [ 2]  193 	addw	y, #0x0004
      00009E 17 0D            [ 2]  194 	ldw	(0x0d, sp), y
                                    195 ;	stm8s_wwdg_main.c: 143: if (!strcmp(argv[1], "write")) // _CMD_MY_WRITE_
      0000A0 5D               [ 2]  196 	tnzw	x
      0000A1 26 70            [ 1]  197 	jrne	00145$
                                    198 ;	stm8s_wwdg_main.c: 145: if (argc < 4)
      0000A3 1E 11            [ 2]  199 	ldw	x, (0x11, sp)
      0000A5 A3 00 04         [ 2]  200 	cpw	x, #0x0004
      0000A8 2E 0A            [ 1]  201 	jrsge	00104$
                                    202 ;	stm8s_wwdg_main.c: 147: MibWriteDebugString(cptr->usage);
      0000AA 1E 03            [ 2]  203 	ldw	x, (0x03, sp)
      0000AC FE               [ 2]  204 	ldw	x, (x)
      0000AD CDr00r00         [ 4]  205 	call	_MibWriteDebugString
                                    206 ;	stm8s_wwdg_main.c: 148: return FALSE;
      0000B0 5F               [ 1]  207 	clrw	x
      0000B1 CCr02rA2         [ 2]  208 	jp	00147$
      0000B4                        209 00104$:
                                    210 ;	stm8s_wwdg_main.c: 150: if (!HexToInt(argv[2], &vdwAddr, 32))
      0000B4 96               [ 1]  211 	ldw	x, sp
      0000B5 1C 00 05         [ 2]  212 	addw	x, #5
      0000B8 16 0D            [ 2]  213 	ldw	y, (0x0d, sp)
      0000BA 90 FE            [ 2]  214 	ldw	y, (y)
      0000BC 4B 20            [ 1]  215 	push	#0x20
      0000BE 4B 00            [ 1]  216 	push	#0x00
      0000C0 89               [ 2]  217 	pushw	x
      0000C1 93               [ 1]  218 	ldw	x, y
      0000C2 CDr00r00         [ 4]  219 	call	_HexToInt
      0000C5 5D               [ 2]  220 	tnzw	x
      0000C6 26 0D            [ 1]  221 	jrne	00106$
                                    222 ;	stm8s_wwdg_main.c: 152: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0000C8 4Br2E            [ 1]  223 	push	#<(__str_3+0)
      0000CA 4Bs00            [ 1]  224 	push	#((__str_3+0) >> 8)
      0000CC CDr00r00         [ 4]  225 	call	_mib_printf
      0000CF 5B 02            [ 2]  226 	addw	sp, #2
                                    227 ;	stm8s_wwdg_main.c: 153: return FALSE;
      0000D1 5F               [ 1]  228 	clrw	x
      0000D2 CCr02rA2         [ 2]  229 	jp	00147$
      0000D5                        230 00106$:
                                    231 ;	stm8s_wwdg_main.c: 155: if (!HexToInt(argv[3], &vbData, 8))
      0000D5 16 13            [ 2]  232 	ldw	y, (0x13, sp)
      0000D7 90 EE 06         [ 2]  233 	ldw	y, (0x6, y)
      0000DA 4B 08            [ 1]  234 	push	#0x08
      0000DC 4B 00            [ 1]  235 	push	#0x00
      0000DE 96               [ 1]  236 	ldw	x, sp
      0000DF 1C 00 0B         [ 2]  237 	addw	x, #11
      0000E2 89               [ 2]  238 	pushw	x
      0000E3 93               [ 1]  239 	ldw	x, y
      0000E4 CDr00r00         [ 4]  240 	call	_HexToInt
      0000E7 5D               [ 2]  241 	tnzw	x
      0000E8 26 0D            [ 1]  242 	jrne	00108$
                                    243 ;	stm8s_wwdg_main.c: 157: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0000EA 4Br2E            [ 1]  244 	push	#<(__str_3+0)
      0000EC 4Bs00            [ 1]  245 	push	#((__str_3+0) >> 8)
      0000EE CDr00r00         [ 4]  246 	call	_mib_printf
      0000F1 5B 02            [ 2]  247 	addw	sp, #2
                                    248 ;	stm8s_wwdg_main.c: 158: return FALSE;
      0000F3 5F               [ 1]  249 	clrw	x
      0000F4 CCr02rA2         [ 2]  250 	jp	00147$
      0000F7                        251 00108$:
                                    252 ;	stm8s_wwdg_main.c: 160: wr_ADDR8(vdwAddr, vbData);
      0000F7 1E 07            [ 2]  253 	ldw	x, (0x07, sp)
      0000F9 7B 09            [ 1]  254 	ld	a, (0x09, sp)
      0000FB F7               [ 1]  255 	ld	(x), a
                                    256 ;	stm8s_wwdg_main.c: 161: ccprintf(_DEBUG_CMD_A_,("wr_ADDR8 : 0x%08lx[0x%02x]\r\n", vdwAddr,vbData));
      0000FC 5F               [ 1]  257 	clrw	x
      0000FD 7B 09            [ 1]  258 	ld	a, (0x09, sp)
      0000FF 97               [ 1]  259 	ld	xl, a
      000100 89               [ 2]  260 	pushw	x
      000101 1E 09            [ 2]  261 	ldw	x, (0x09, sp)
      000103 89               [ 2]  262 	pushw	x
      000104 1E 09            [ 2]  263 	ldw	x, (0x09, sp)
      000106 89               [ 2]  264 	pushw	x
      000107 4Br4B            [ 1]  265 	push	#<(__str_4+0)
      000109 4Bs00            [ 1]  266 	push	#((__str_4+0) >> 8)
      00010B CDr00r00         [ 4]  267 	call	_mib_printf
      00010E 5B 08            [ 2]  268 	addw	sp, #8
      000110 CCr02rA0         [ 2]  269 	jp	00146$
      000113                        270 00145$:
                                    271 ;	stm8s_wwdg_main.c: 166: else if (!strcmp(argv[1], "read")) // _CMD_MY_READ_
      000113 1E 01            [ 2]  272 	ldw	x, (0x01, sp)
      000115 FE               [ 2]  273 	ldw	x, (x)
      000116 4Br68            [ 1]  274 	push	#<(___str_5+0)
      000118 4Bs00            [ 1]  275 	push	#((___str_5+0) >> 8)
      00011A CDr00r00         [ 4]  276 	call	_strcmp
      00011D 51               [ 1]  277 	exgw	x, y
                                    278 ;	stm8s_wwdg_main.c: 168: if (argc < 3)
      00011E 1E 11            [ 2]  279 	ldw	x, (0x11, sp)
      000120 A3 00 03         [ 2]  280 	cpw	x, #0x0003
      000123 2F 02            [ 1]  281 	jrslt	00249$
      000125 4F               [ 1]  282 	clr	a
      000126 C5                     283 	.byte 0xc5
      000127                        284 00249$:
      000127 A6 01            [ 1]  285 	ld	a, #0x01
      000129                        286 00250$:
                                    287 ;	stm8s_wwdg_main.c: 166: else if (!strcmp(argv[1], "read")) // _CMD_MY_READ_
      000129 90 5D            [ 2]  288 	tnzw	y
      00012B 26 48            [ 1]  289 	jrne	00142$
                                    290 ;	stm8s_wwdg_main.c: 168: if (argc < 3)
      00012D 4D               [ 1]  291 	tnz	a
      00012E 27 0A            [ 1]  292 	jreq	00110$
                                    293 ;	stm8s_wwdg_main.c: 170: MibWriteDebugString(cptr->usage);
      000130 1E 03            [ 2]  294 	ldw	x, (0x03, sp)
      000132 FE               [ 2]  295 	ldw	x, (x)
      000133 CDr00r00         [ 4]  296 	call	_MibWriteDebugString
                                    297 ;	stm8s_wwdg_main.c: 171: return FALSE;
      000136 5F               [ 1]  298 	clrw	x
      000137 CCr02rA2         [ 2]  299 	jp	00147$
      00013A                        300 00110$:
                                    301 ;	stm8s_wwdg_main.c: 173: if (!HexToInt(argv[2], &vdwAddr, 32))
      00013A 96               [ 1]  302 	ldw	x, sp
      00013B 1C 00 05         [ 2]  303 	addw	x, #5
      00013E 16 0D            [ 2]  304 	ldw	y, (0x0d, sp)
      000140 90 FE            [ 2]  305 	ldw	y, (y)
      000142 4B 20            [ 1]  306 	push	#0x20
      000144 4B 00            [ 1]  307 	push	#0x00
      000146 89               [ 2]  308 	pushw	x
      000147 93               [ 1]  309 	ldw	x, y
      000148 CDr00r00         [ 4]  310 	call	_HexToInt
      00014B 5D               [ 2]  311 	tnzw	x
      00014C 26 0D            [ 1]  312 	jrne	00112$
                                    313 ;	stm8s_wwdg_main.c: 175: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      00014E 4Br2E            [ 1]  314 	push	#<(__str_3+0)
      000150 4Bs00            [ 1]  315 	push	#((__str_3+0) >> 8)
      000152 CDr00r00         [ 4]  316 	call	_mib_printf
      000155 5B 02            [ 2]  317 	addw	sp, #2
                                    318 ;	stm8s_wwdg_main.c: 176: return FALSE;
      000157 5F               [ 1]  319 	clrw	x
      000158 CCr02rA2         [ 2]  320 	jp	00147$
      00015B                        321 00112$:
                                    322 ;	stm8s_wwdg_main.c: 179: vbData = rd_ADDR8(vdwAddr);
      00015B 1E 07            [ 2]  323 	ldw	x, (0x07, sp)
      00015D F6               [ 1]  324 	ld	a, (x)
      00015E 6B 09            [ 1]  325 	ld	(0x09, sp), a
                                    326 ;	stm8s_wwdg_main.c: 181: ccprintf(_DEBUG_CMD_A_,("rd_ADDR8 : 0x%08lx[0x%02x]\r\n", vdwAddr,vbData));
      000160 5F               [ 1]  327 	clrw	x
      000161 97               [ 1]  328 	ld	xl, a
      000162 89               [ 2]  329 	pushw	x
      000163 1E 09            [ 2]  330 	ldw	x, (0x09, sp)
      000165 89               [ 2]  331 	pushw	x
      000166 1E 09            [ 2]  332 	ldw	x, (0x09, sp)
      000168 89               [ 2]  333 	pushw	x
      000169 4Br6D            [ 1]  334 	push	#<(__str_6+0)
      00016B 4Bs00            [ 1]  335 	push	#((__str_6+0) >> 8)
      00016D CDr00r00         [ 4]  336 	call	_mib_printf
      000170 5B 08            [ 2]  337 	addw	sp, #8
      000172 CCr02rA0         [ 2]  338 	jp	00146$
      000175                        339 00142$:
                                    340 ;	stm8s_wwdg_main.c: 186: else if (!strcmp(argv[1], "start")) // _CMD_MY_READ_
      000175 1E 01            [ 2]  341 	ldw	x, (0x01, sp)
      000177 FE               [ 2]  342 	ldw	x, (x)
      000178 88               [ 1]  343 	push	a
      000179 4Br8A            [ 1]  344 	push	#<(___str_7+0)
      00017B 4Bs00            [ 1]  345 	push	#((___str_7+0) >> 8)
      00017D CDr00r00         [ 4]  346 	call	_strcmp
      000180 84               [ 1]  347 	pop	a
      000181 5D               [ 2]  348 	tnzw	x
      000182 27 03            [ 1]  349 	jreq	00254$
      000184 CCr02r68         [ 2]  350 	jp	00139$
      000187                        351 00254$:
                                    352 ;	stm8s_wwdg_main.c: 188: uint8_t vbIndex = 0;
      000187 0F 0C            [ 1]  353 	clr	(0x0c, sp)
                                    354 ;	stm8s_wwdg_main.c: 190: if (argc < 3)
      000189 4D               [ 1]  355 	tnz	a
      00018A 27 0A            [ 1]  356 	jreq	00114$
                                    357 ;	stm8s_wwdg_main.c: 192: MibWriteDebugString(cptr->usage);
      00018C 1E 03            [ 2]  358 	ldw	x, (0x03, sp)
      00018E FE               [ 2]  359 	ldw	x, (x)
      00018F CDr00r00         [ 4]  360 	call	_MibWriteDebugString
                                    361 ;	stm8s_wwdg_main.c: 193: return FALSE;
      000192 5F               [ 1]  362 	clrw	x
      000193 CCr02rA2         [ 2]  363 	jp	00147$
      000196                        364 00114$:
                                    365 ;	stm8s_wwdg_main.c: 195: if (!DecToLong(argv[2], &vwData, 16))
      000196 96               [ 1]  366 	ldw	x, sp
      000197 1C 00 0A         [ 2]  367 	addw	x, #10
      00019A 16 0D            [ 2]  368 	ldw	y, (0x0d, sp)
      00019C 90 FE            [ 2]  369 	ldw	y, (y)
      00019E 4B 10            [ 1]  370 	push	#0x10
      0001A0 4B 00            [ 1]  371 	push	#0x00
      0001A2 89               [ 2]  372 	pushw	x
      0001A3 93               [ 1]  373 	ldw	x, y
      0001A4 CDr00r00         [ 4]  374 	call	_DecToLong
      0001A7 5D               [ 2]  375 	tnzw	x
      0001A8 26 0D            [ 1]  376 	jrne	00116$
                                    377 ;	stm8s_wwdg_main.c: 197: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0001AA 4Br2E            [ 1]  378 	push	#<(__str_3+0)
      0001AC 4Bs00            [ 1]  379 	push	#((__str_3+0) >> 8)
      0001AE CDr00r00         [ 4]  380 	call	_mib_printf
      0001B1 5B 02            [ 2]  381 	addw	sp, #2
                                    382 ;	stm8s_wwdg_main.c: 198: return FALSE;
      0001B3 5F               [ 1]  383 	clrw	x
      0001B4 CCr02rA2         [ 2]  384 	jp	00147$
      0001B7                        385 00116$:
                                    386 ;	stm8s_wwdg_main.c: 200: GPIO_Configuration();
      0001B7 CDr02rA8         [ 4]  387 	call	_GPIO_Configuration
                                    388 ;	stm8s_wwdg_main.c: 201: ccprintf(_DEBUG_CMD_A_, ("wwdg delay [%d] msec  fcpu : 16MHz delay (1 to 49)msec\r\n",(vwData)));		
      0001BA 1E 0A            [ 2]  389 	ldw	x, (0x0a, sp)
      0001BC 89               [ 2]  390 	pushw	x
      0001BD 4Br90            [ 1]  391 	push	#<(__str_8+0)
      0001BF 4Bs00            [ 1]  392 	push	#((__str_8+0) >> 8)
      0001C1 CDr00r00         [ 4]  393 	call	_mib_printf
      0001C4 5B 04            [ 2]  394 	addw	sp, #4
                                    395 ;	stm8s_wwdg_main.c: 202: if(vwData<10) vwData = 10;
      0001C6 1E 0A            [ 2]  396 	ldw	x, (0x0a, sp)
      0001C8 A3 00 0A         [ 2]  397 	cpw	x, #0x000a
      0001CB 24 07            [ 1]  398 	jrnc	00120$
      0001CD AE 00 0A         [ 2]  399 	ldw	x, #0x000a
      0001D0 1F 0A            [ 2]  400 	ldw	(0x0a, sp), x
      0001D2 20 0A            [ 2]  401 	jra	00121$
      0001D4                        402 00120$:
                                    403 ;	stm8s_wwdg_main.c: 203: else if(vwData>49) vwData = 49;
      0001D4 A3 00 31         [ 2]  404 	cpw	x, #0x0031
      0001D7 23 05            [ 2]  405 	jrule	00121$
      0001D9 AE 00 31         [ 2]  406 	ldw	x, #0x0031
      0001DC 1F 0A            [ 2]  407 	ldw	(0x0a, sp), x
      0001DE                        408 00121$:
                                    409 ;	stm8s_wwdg_main.c: 204: vbDelayCR = (calConfigWWDG(vwData) & 0x3F) | 0xC0;
      0001DE 1E 0A            [ 2]  410 	ldw	x, (0x0a, sp)
      0001E0 CDr00r00         [ 4]  411 	call	_calConfigWWDG
      0001E3 9F               [ 1]  412 	ld	a, xl
      0001E4 A4 3F            [ 1]  413 	and	a, #0x3f
      0001E6 AA C0            [ 1]  414 	or	a, #0xc0
      0001E8 6B 0D            [ 1]  415 	ld	(0x0d, sp), a
                                    416 ;	stm8s_wwdg_main.c: 205: gwMibMiliSec = 0; 
      0001EA 5F               [ 1]  417 	clrw	x
      0001EB CFu00u00         [ 2]  418 	ldw	_gwMibMiliSec+0, x
                                    419 ;	stm8s_wwdg_main.c: 206: WWDG->WR = 0x7F;
      0001EE 35 7F 50 D2      [ 1]  420 	mov	0x50d2+0, #0x7f
                                    421 ;	stm8s_wwdg_main.c: 207: WWDG->CR = vbDelayCR; 
      0001F2 AE 50 D1         [ 2]  422 	ldw	x, #0x50d1
      0001F5 7B 0D            [ 1]  423 	ld	a, (0x0d, sp)
      0001F7 F7               [ 1]  424 	ld	(x), a
                                    425 ;	stm8s_wwdg_main.c: 208: do {				
      0001F8 0F 0E            [ 1]  426 	clr	(0x0e, sp)
      0001FA                        427 00129$:
                                    428 ;	stm8s_wwdg_main.c: 209: if(gwMibMiliSec==0)
      0001FA CEu00u00         [ 2]  429 	ldw	x, _gwMibMiliSec+0
      0001FD 26 41            [ 1]  430 	jrne	00126$
                                    431 ;	stm8s_wwdg_main.c: 211: vbIndex++;
      0001FF 0C 0E            [ 1]  432 	inc	(0x0e, sp)
      000201 7B 0E            [ 1]  433 	ld	a, (0x0e, sp)
      000203 6B 0C            [ 1]  434 	ld	(0x0c, sp), a
                                    435 ;	stm8s_wwdg_main.c: 212: if(vbIndex==100)
      000205 7B 0E            [ 1]  436 	ld	a, (0x0e, sp)
      000207 A1 64            [ 1]  437 	cp	a, #0x64
      000209 26 23            [ 1]  438 	jrne	00123$
                                    439 ;	stm8s_wwdg_main.c: 214: WWDG->CR = 0xFF; // vbDelayCR; 
      00020B 35 FF 50 D1      [ 1]  440 	mov	0x50d1+0, #0xff
                                    441 ;	stm8s_wwdg_main.c: 215: ccprintf(_DEBUG_CMD_A_, ("wwdg start....(%d)[%u:%d]\r\n",vbIndex,vwData,vwData));		
      00020F 5F               [ 1]  442 	clrw	x
      000210 7B 0E            [ 1]  443 	ld	a, (0x0e, sp)
      000212 97               [ 1]  444 	ld	xl, a
      000213 16 0A            [ 2]  445 	ldw	y, (0x0a, sp)
      000215 90 89            [ 2]  446 	pushw	y
      000217 16 0C            [ 2]  447 	ldw	y, (0x0c, sp)
      000219 90 89            [ 2]  448 	pushw	y
      00021B 89               [ 2]  449 	pushw	x
      00021C 4BrC9            [ 1]  450 	push	#<(__str_9+0)
      00021E 4Bs00            [ 1]  451 	push	#((__str_9+0) >> 8)
      000220 CDr00r00         [ 4]  452 	call	_mib_printf
      000223 5B 08            [ 2]  453 	addw	sp, #8
                                    454 ;	stm8s_wwdg_main.c: 216: MibWriteDebugEmptyCheck();
      000225 CDr00r00         [ 4]  455 	call	_MibWriteDebugEmptyCheck
                                    456 ;	stm8s_wwdg_main.c: 217: WWDG->CR = 0x0; 
      000228 35 00 50 D1      [ 1]  457 	mov	0x50d1+0, #0x00
                                    458 ;	stm8s_wwdg_main.c: 218: break;
      00022C 20 72            [ 2]  459 	jra	00146$
      00022E                        460 00123$:
                                    461 ;	stm8s_wwdg_main.c: 222: WWDG->CR = vbDelayCR; 
      00022E AE 50 D1         [ 2]  462 	ldw	x, #0x50d1
      000231 7B 0D            [ 1]  463 	ld	a, (0x0d, sp)
      000233 F7               [ 1]  464 	ld	(x), a
                                    465 ;	stm8s_wwdg_main.c: 224: gwMibMiliSec = vwData-10; 
      000234 1E 0A            [ 2]  466 	ldw	x, (0x0a, sp)
      000236 1D 00 0A         [ 2]  467 	subw	x, #0x000a
      000239 CFu00u00         [ 2]  468 	ldw	_gwMibMiliSec+0, x
                                    469 ;	stm8s_wwdg_main.c: 226: UCOM_LED1_GPIO->ODR ^= (uint8_t)UCOM_LED1_PIN;
      00023C 90 10 50 0F      [ 1]  470 	bcpl	0x500f, #0
      000240                        471 00126$:
                                    472 ;	stm8s_wwdg_main.c: 228: if((UCOM_KEY1_GPIO->IDR & UCOM_KEY1_PIN)==0)
      000240 72 0A 50 06 B5   [ 2]  473 	btjt	0x5006, #5, 00129$
                                    474 ;	stm8s_wwdg_main.c: 230: WWDG->CR = 0xFF; // vbDelayCR; 
      000245 35 FF 50 D1      [ 1]  475 	mov	0x50d1+0, #0xff
                                    476 ;	stm8s_wwdg_main.c: 231: ccprintf(_DEBUG_CMD_A_, ("wwdg start....(%d)[%u:%d]\r\n",vbIndex,vwData,vwData));		
      000249 5F               [ 1]  477 	clrw	x
      00024A 7B 0C            [ 1]  478 	ld	a, (0x0c, sp)
      00024C 97               [ 1]  479 	ld	xl, a
      00024D 16 0A            [ 2]  480 	ldw	y, (0x0a, sp)
      00024F 90 89            [ 2]  481 	pushw	y
      000251 16 0C            [ 2]  482 	ldw	y, (0x0c, sp)
      000253 90 89            [ 2]  483 	pushw	y
      000255 89               [ 2]  484 	pushw	x
      000256 4BrC9            [ 1]  485 	push	#<(__str_9+0)
      000258 4Bs00            [ 1]  486 	push	#((__str_9+0) >> 8)
      00025A CDr00r00         [ 4]  487 	call	_mib_printf
      00025D 5B 08            [ 2]  488 	addw	sp, #8
                                    489 ;	stm8s_wwdg_main.c: 232: MibWriteDebugEmptyCheck();
      00025F CDr00r00         [ 4]  490 	call	_MibWriteDebugEmptyCheck
                                    491 ;	stm8s_wwdg_main.c: 233: WWDG->CR = 0x0; 
      000262 35 00 50 D1      [ 1]  492 	mov	0x50d1+0, #0x00
                                    493 ;	stm8s_wwdg_main.c: 234: break;
      000266 20 38            [ 2]  494 	jra	00146$
                                    495 ;	stm8s_wwdg_main.c: 236: } while(1);
      000268                        496 00139$:
                                    497 ;	stm8s_wwdg_main.c: 242: else if (!strcmp(argv[1], "init")) // _CMD_MY_READ_
      000268 1E 01            [ 2]  498 	ldw	x, (0x01, sp)
      00026A FE               [ 2]  499 	ldw	x, (x)
      00026B 4BrE5            [ 1]  500 	push	#<(___str_10+0)
      00026D 4Bs00            [ 1]  501 	push	#((___str_10+0) >> 8)
      00026F CDr00r00         [ 4]  502 	call	_strcmp
      000272 5D               [ 2]  503 	tnzw	x
      000273 26 0E            [ 1]  504 	jrne	00136$
                                    505 ;	stm8s_wwdg_main.c: 244: GPIO_Configuration();
      000275 CDr02rA8         [ 4]  506 	call	_GPIO_Configuration
                                    507 ;	stm8s_wwdg_main.c: 246: ccprintf(_DEBUG_CMD_A_, ("wwdg init....()\r\n"));		
      000278 4BrEA            [ 1]  508 	push	#<(__str_11+0)
      00027A 4Bs00            [ 1]  509 	push	#((__str_11+0) >> 8)
      00027C CDr00r00         [ 4]  510 	call	_mib_printf
      00027F 5B 02            [ 2]  511 	addw	sp, #2
      000281 20 1D            [ 2]  512 	jra	00146$
      000283                        513 00136$:
                                    514 ;	stm8s_wwdg_main.c: 251: else if (!strcmp(argv[1], "help")) // _CMD_MY_READ_
      000283 1E 01            [ 2]  515 	ldw	x, (0x01, sp)
      000285 FE               [ 2]  516 	ldw	x, (x)
      000286 4BrFC            [ 1]  517 	push	#<(___str_12+0)
      000288 4Bs00            [ 1]  518 	push	#((___str_12+0) >> 8)
      00028A CDr00r00         [ 4]  519 	call	_strcmp
      00028D 5D               [ 2]  520 	tnzw	x
      00028E 26 08            [ 1]  521 	jrne	00133$
                                    522 ;	stm8s_wwdg_main.c: 255: "wwdg init // gpio init\r\n"\
      000290 AEr01r01         [ 2]  523 	ldw	x, #(___str_13+0)
      000293 CDr00r00         [ 4]  524 	call	_MibWriteDebugString
      000296 20 08            [ 2]  525 	jra	00146$
      000298                        526 00133$:
                                    527 ;	stm8s_wwdg_main.c: 261: MibWriteDebugString(cptr->usage);
      000298 1E 03            [ 2]  528 	ldw	x, (0x03, sp)
      00029A FE               [ 2]  529 	ldw	x, (x)
      00029B CDr00r00         [ 4]  530 	call	_MibWriteDebugString
                                    531 ;	stm8s_wwdg_main.c: 262: return FALSE;
      00029E 5F               [ 1]  532 	clrw	x
                                    533 ;	stm8s_wwdg_main.c: 264: return TRUE;
      00029F C5                     534 	.byte 0xc5
      0002A0                        535 00146$:
      0002A0 5F               [ 1]  536 	clrw	x
      0002A1 5C               [ 1]  537 	incw	x
      0002A2                        538 00147$:
                                    539 ;	stm8s_wwdg_main.c: 265: }
      0002A2 16 0F            [ 2]  540 	ldw	y, (15, sp)
      0002A4 5B 14            [ 2]  541 	addw	sp, #20
      0002A6 90 FC            [ 2]  542 	jp	(y)
                                    543 ;	stm8s_wwdg_main.c: 313: void GPIO_Configuration(void)
                                    544 ;	-----------------------------------------
                                    545 ;	 function GPIO_Configuration
                                    546 ;	-----------------------------------------
      0002A8                        547 _GPIO_Configuration:
                                    548 ;	stm8s_wwdg_main.c: 328: UCOM_LED1_GPIO->DDR |= (UCOM_LED1_PIN); /* Set Output mode */
      0002A8 72 10 50 11      [ 1]  549 	bset	0x5011, #0
                                    550 ;	stm8s_wwdg_main.c: 329: UCOM_LED1_GPIO->CR1 |= (UCOM_LED1_PIN);	/* Pull-Up or Push-Pull */
      0002AC 72 10 50 12      [ 1]  551 	bset	0x5012, #0
                                    552 ;	stm8s_wwdg_main.c: 330: UCOM_LED1_GPIO->CR2 |= (UCOM_LED1_PIN);	/* Output speed up to 10 MHz */
      0002B0 72 10 50 13      [ 1]  553 	bset	0x5013, #0
                                    554 ;	stm8s_wwdg_main.c: 331: UCOM_LED1_GPIO->ODR &= ~(UCOM_LED1_PIN); // low... 
      0002B4 72 11 50 0F      [ 1]  555 	bres	0x500f, #0
                                    556 ;	stm8s_wwdg_main.c: 336: UCOM_KEY1_GPIO->DDR &= ~(UCOM_KEY1_PIN);  /* Set input mode */
      0002B8 72 1B 50 07      [ 1]  557 	bres	0x5007, #5
                                    558 ;	stm8s_wwdg_main.c: 337: UCOM_KEY1_GPIO->CR1 |= (UCOM_KEY1_PIN);	 /* Pull-Up or Push-Pull */
      0002BC 72 1A 50 08      [ 1]  559 	bset	0x5008, #5
                                    560 ;	stm8s_wwdg_main.c: 338: UCOM_KEY1_GPIO->CR2 &= ~(UCOM_KEY1_PIN); /*  External interrupt disabled */
      0002C0 72 1B 50 09      [ 1]  561 	bres	0x5009, #5
                                    562 ;	stm8s_wwdg_main.c: 340: }
      0002C4 81               [ 4]  563 	ret
                                    564 	.area CODE
                                    565 	.area CONST
                                    566 	.area CONST
      000000                        567 __str_0:
      000000 49 4E 46 4F 3A 2B 63   568 	.ascii "INFO:+cmd_wwdg..."
             6D 64 5F 77 77 64 67
             2E 2E 2E
      000011 0D                     569 	.db 0x0d
      000012 0A                     570 	.db 0x0a
      000013 00                     571 	.db 0x00
                                    572 	.area CODE
                                    573 	.area CONST
      000014                        574 __str_1:
      000014 49 4E 46 4F 3A 2D 63   575 	.ascii "INFO:-cmd_wwdg..."
             6D 64 5F 77 77 64 67
             2E 2E 2E
      000025 0D                     576 	.db 0x0d
      000026 0A                     577 	.db 0x0a
      000027 00                     578 	.db 0x00
                                    579 	.area CODE
                                    580 	.area CONST
      000028                        581 ___str_2:
      000028 77 72 69 74 65         582 	.ascii "write"
      00002D 00                     583 	.db 0x00
                                    584 	.area CODE
                                    585 	.area CONST
      00002E                        586 __str_3:
      00002E 49 6C 6C 75 67 61 6C   587 	.ascii "Illugal character is used."
             20 63 68 61 72 61 63
             74 65 72 20 69 73 20
             75 73 65 64 2E
      000048 0D                     588 	.db 0x0d
      000049 0A                     589 	.db 0x0a
      00004A 00                     590 	.db 0x00
                                    591 	.area CODE
                                    592 	.area CONST
      00004B                        593 __str_4:
      00004B 77 72 5F 41 44 44 52   594 	.ascii "wr_ADDR8 : 0x%08lx[0x%02x]"
             38 20 3A 20 30 78 25
             30 38 6C 78 5B 30 78
             25 30 32 78 5D
      000065 0D                     595 	.db 0x0d
      000066 0A                     596 	.db 0x0a
      000067 00                     597 	.db 0x00
                                    598 	.area CODE
                                    599 	.area CONST
      000068                        600 ___str_5:
      000068 72 65 61 64            601 	.ascii "read"
      00006C 00                     602 	.db 0x00
                                    603 	.area CODE
                                    604 	.area CONST
      00006D                        605 __str_6:
      00006D 72 64 5F 41 44 44 52   606 	.ascii "rd_ADDR8 : 0x%08lx[0x%02x]"
             38 20 3A 20 30 78 25
             30 38 6C 78 5B 30 78
             25 30 32 78 5D
      000087 0D                     607 	.db 0x0d
      000088 0A                     608 	.db 0x0a
      000089 00                     609 	.db 0x00
                                    610 	.area CODE
                                    611 	.area CONST
      00008A                        612 ___str_7:
      00008A 73 74 61 72 74         613 	.ascii "start"
      00008F 00                     614 	.db 0x00
                                    615 	.area CODE
                                    616 	.area CONST
      000090                        617 __str_8:
      000090 77 77 64 67 20 64 65   618 	.ascii "wwdg delay [%d] msec  fcpu : 16MHz delay (1 to 49)msec"
             6C 61 79 20 5B 25 64
             5D 20 6D 73 65 63 20
             20 66 63 70 75 20 3A
             20 31 36 4D 48 7A 20
             64 65 6C 61 79 20 28
             31 20 74 6F 20 34 39
             29 6D 73 65 63
      0000C6 0D                     619 	.db 0x0d
      0000C7 0A                     620 	.db 0x0a
      0000C8 00                     621 	.db 0x00
                                    622 	.area CODE
                                    623 	.area CONST
      0000C9                        624 __str_9:
      0000C9 77 77 64 67 20 73 74   625 	.ascii "wwdg start....(%d)[%u:%d]"
             61 72 74 2E 2E 2E 2E
             28 25 64 29 5B 25 75
             3A 25 64 5D
      0000E2 0D                     626 	.db 0x0d
      0000E3 0A                     627 	.db 0x0a
      0000E4 00                     628 	.db 0x00
                                    629 	.area CODE
                                    630 	.area CONST
      0000E5                        631 ___str_10:
      0000E5 69 6E 69 74            632 	.ascii "init"
      0000E9 00                     633 	.db 0x00
                                    634 	.area CODE
                                    635 	.area CONST
      0000EA                        636 __str_11:
      0000EA 77 77 64 67 20 69 6E   637 	.ascii "wwdg init....()"
             69 74 2E 2E 2E 2E 28
             29
      0000F9 0D                     638 	.db 0x0d
      0000FA 0A                     639 	.db 0x0a
      0000FB 00                     640 	.db 0x00
                                    641 	.area CODE
                                    642 	.area CONST
      0000FC                        643 ___str_12:
      0000FC 68 65 6C 70            644 	.ascii "help"
      000100 00                     645 	.db 0x00
                                    646 	.area CODE
                                    647 	.area CONST
      000101                        648 ___str_13:
      000101 77 77 64 67 20 68 65   649 	.ascii "wwdg help...."
             6C 70 2E 2E 2E 2E
      00010E 09                     650 	.db 0x09
      00010F 0D                     651 	.db 0x0d
      000110 0A                     652 	.db 0x0a
      000111 77 77 64 67 20 69 6E   653 	.ascii "wwdg init // gpio init"
             69 74 20 2F 2F 20 67
             70 69 6F 20 69 6E 69
             74
      000127 0D                     654 	.db 0x0d
      000128 0A                     655 	.db 0x0a
      000129 77 77 64 67 20 73 74   656 	.ascii "wwdg start 49 // It should refresh within 49 miliseconds.  "
             61 72 74 20 34 39 20
             2F 2F 20 49 74 20 73
             68 6F 75 6C 64 20 72
             65 66 72 65 73 68 20
             77 69 74 68 69 6E 20
             34 39 20 6D 69 6C 69
             73 65 63 6F 6E 64 73
             2E 20 20
      000164 0D                     657 	.db 0x0d
      000165 0A                     658 	.db 0x0a
      000166 2F 2F 20 66 63 70 75   659 	.ascii "// fcpu : 16MHz delay (1 to 49)msec"
             20 3A 20 31 36 4D 48
             7A 20 64 65 6C 61 79
             20 28 31 20 74 6F 20
             34 39 29 6D 73 65 63
      000189 0D                     660 	.db 0x0d
      00018A 0A                     661 	.db 0x0a
      00018B 00                     662 	.db 0x00
                                    663 	.area CODE
                                    664 	.area CONST
      00018C                        665 ___str_14:
      00018C 77 77 64 67            666 	.ascii "wwdg"
      000190 00                     667 	.db 0x00
                                    668 	.area CODE
                                    669 	.area CONST
      000191                        670 ___str_15:
      000191 20 20 77 77 64 67 20   671 	.ascii "  wwdg {init} "
             7B 69 6E 69 74 7D 20
      00019F 0D                     672 	.db 0x0d
      0001A0 0A                     673 	.db 0x0a
      0001A1 20 20 77 77 64 67 20   674 	.ascii "  wwdg {write} [addr] [data]  "
             7B 77 72 69 74 65 7D
             20 5B 61 64 64 72 5D
             20 5B 64 61 74 61 5D
             20 20
      0001BF 0D                     675 	.db 0x0d
      0001C0 0A                     676 	.db 0x0a
      0001C1 20 20 77 77 64 67 20   677 	.ascii "  wwdg {read} [addr] "
             7B 72 65 61 64 7D 20
             5B 61 64 64 72 5D 20
      0001D6 0D                     678 	.db 0x0d
      0001D7 0A                     679 	.db 0x0a
      0001D8 20 20 77 77 64 67 20   680 	.ascii "  wwdg {start} [delay:msec] fcpu : 16MHz delay (1 to 49) "
             7B 73 74 61 72 74 7D
             20 5B 64 65 6C 61 79
             3A 6D 73 65 63 5D 20
             66 63 70 75 20 3A 20
             31 36 4D 48 7A 20 64
             65 6C 61 79 20 28 31
             20 74 6F 20 34 39 29
             20
      000211 0D                     681 	.db 0x0d
      000212 0A                     682 	.db 0x0a
      000213 20 20 77 77 64 67 20   683 	.ascii "  wwdg {help}  iwdg help."
             7B 68 65 6C 70 7D 20
             20 69 77 64 67 20 68
             65 6C 70 2E
      00022C 0D                     684 	.db 0x0d
      00022D 0A                     685 	.db 0x0a
      00022E 00                     686 	.db 0x00
                                    687 	.area CODE
                                    688 	.area INITIALIZER
      000000                        689 __xinit__cmdTbl_only:
      000000r01r8C                  690 	.dw ___str_14
      000002r00r66                  691 	.dw _DoWWDG
      000004r01r91                  692 	.dw ___str_15
      000006 00 00                  693 	.dw #0x0000
      000008 00 00                  694 	.dw #0x0000
      00000A 00 00                  695 	.dw #0x0000
                                    696 	.area CABS (ABS)
